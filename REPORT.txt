Contribution of each team member:
Rohit: Handled generating functions, instance variables, and constructors in classes in pd.c
Matt: Defined the class structure in parser.h and handled most of the parsing in parser.c
Alex: Debugged parser.c and finished implementation of class storage. Handled variable naming in pd.c


What did you propose to do?

We proposed to implement classes so that someone would be able to define their 
own classes in the fun language and create instances of those classes. Classes
were supposed to have 0 or more constructors with different numbers of 
parameters, any number of uniquely named instance variables, and functions with
any number of parameters.


What did you actually do?

We implemented classes so that they could be defined with the following format:
class className {
    //Any instance variables
    x = 1
    //Any constructors
    className() {
    }
    //Any functions
    fun functionName() {
    }
}

Classes are initialized in the format of:
    object = new className(<Parameters>);
and the instances and methods of the object are in the format of:
    obj_instance
    obj_function()

Restrictions: The instances, if any, must come before the constructors, if any,
which must come before the functions, if any, within a class definition. All
previous restrictions of the fun language still hold with regards to naming and
syntax.

What was difficult?

It was difficult to modify an existing interface to fit a very different need.
Modifying the parser was difficult because the process was tedious and very
specific, making small errors turn into segmentation faults.
The parser essentially had to process the classes while it was processing the
functions, even though the functions were returned separately from the classes. 
This meant that our solution was not as elegant in order to add this extra
functionality. This showed us that it is sometimes difficult to retrofit an
interface for something that it was not originally intended to do without
changing a lot of existing code or coming up with a solution that may not
necessarily be elegant. To solve it we had to deal with parse them functions and 
classes, but generate the assembly code for them separately, while adding object 
identifiers to the class methods and instances mid-generation. Dealing with
multiple constructors was very tricky because we imagined we could generate all the
constructors at the beginning after we parsed our classes, but we realized we 
need to dynamically introduce the object name, so we instead created many duplicate
constructors to deal with each object at the end of our program execution.


What did you learn?

The biggest lessons from this were how to plan and how to test large projects.
We learned that it is valuable to thoroughly plan out complicated interfaces
ahead of time. We had a couple of set backs because our implementation was 
flawed from the planning stage. Many times we realized that our planned implementation
would not comply with the parsing setup, so we found different methods of tricking
the program to do what we wanted it to do. It is also important that the tests get 
gradually harder as they go on. This is important because it allows for someone
to see the progress gradually as each of the tests are passed. It shows that 
one feature works, so that the next test is able to build upon that and 
demonstrate how another feature works.
